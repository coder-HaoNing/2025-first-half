请根据我的项目的结构和框架将提供的待修改代码进行修改，并且保证项目整体能够运行，严格按照下列要求：

1.待修改代码
from flask import Flask, request, jsonify
import os
import pathlib
import uuid
from datetime import datetime, timedelta
from PIL import Image
from io import BytesIO
import base64
from collections import Counter
from werkzeug.utils import secure_filename
from openai_utils import get_openai_client

app = Flask(__name__)

# 文件目录配置
assets_dir = pathlib.Path("assets")
uploads_dir = assets_dir / "uploads"
generated_dir = assets_dir / "generated"

# 创建必要的目录
uploads_dir.mkdir(parents=True, exist_ok=True)
generated_dir.mkdir(parents=True, exist_ok=True)


def is_valid_image(file_path: pathlib.Path) -> bool:
    """验证文件是否为有效图片"""
    try:
        with Image.open(file_path) as img:
            img.verify()
        return True
    except Exception:
        return False


def extract_dominant_colors(image_path: pathlib.Path, num_colors: int = 5) -> list[dict[str, float | str]]:
    """提取图片中的主要颜色及其占比"""
    try:
        # 打开图片并转换为RGB模式
        img = Image.open(image_path)
        if img.mode != 'RGB':
            img = img.convert('RGB')
        # 缩小图片以加快处理速度，同时保留细节
        img = img.resize((150, 150))
        pixels = list(img.getdata())
        # 将RGB转换为HEX格式并计数
        hex_colors = [f"#{r:02x}{g:02x}{b:02x}" for r, g, b in pixels]
        color_counter = Counter(hex_colors)
        total_pixels = len(pixels)
        dominant_colors: list[dict[str, float | str]] = []
        for color, count in color_counter.most_common(num_colors * 2):
            percentage = round((count / total_pixels) * 100, 1)
            if percentage >= 1:
                dominant_colors.append({"hex": color, "percentage": percentage})
            if len(dominant_colors) >= num_colors:
                break
        if not dominant_colors and color_counter:
            color, count = color_counter.most_common(1)[0]
            percentage = round((count / total_pixels) * 100, 1)
            dominant_colors.append({"hex": color, "percentage": percentage})
        return dominant_colors
    except Exception as e:
        app.logger.error(f"提取颜色失败: {e}")
        return []


def encode_image(image_path: pathlib.Path) -> str:
    """编码图片为base64格式"""
    with open(image_path, "rb") as image_file:
        return base64.b64encode(image_file.read()).decode('utf-8')


def analyze_image_emotion(image_path: pathlib.Path, colors: list[dict[str, float | str]], word_count: int) -> str:
    """使用Gemini API分析图片情感"""
    try:
        client = get_openai_client()
        base64_image = encode_image(image_path)
        color_info = "\n".join([f"- {color['hex']} 占比{color['percentage']}%" for color in colors])
        prompt = (
            f"请分析这张图片的色彩情感，生成约{word_count}字的分析文本。\n"
            f"图片中的主要颜色及占比如下：\n"
            f"{color_info}\n\n"
            "请从色彩心理学角度分析这些颜色传递的情感和氛围，并描述它们在整体画面中的作用。\n"
            "回答格式要求：直接输出分析文本，不要包含任何前缀或标题。"
        )
        response = client.chat.completions.create(
            model=os.environ["OPENAI_MODEL_NAME"],
            messages=[{
                "role": "user",
                "content": [
                    {"type": "text", "text": prompt},
                    {"type": "image_url", "image_url": {"url": f"data:image/jpeg;base64,{base64_image}"}},
                ],
            }],
        )
        emotion_analysis: str = response.choices[0].message.content
        return emotion_analysis
    except Exception as e:
        app.logger.error(f"情感分析失败: {e}")
        return f"分析过程中出现错误: {e}"


@app.route('/ai-analysis', methods=['POST'])
def analyze_image():
    """处理图片分析请求"""
    if 'image' not in request.files:
        return jsonify(code=0, msg="未上传图片文件"), 400

    file = request.files['image']
    word_count_str = request.form.get('wordCount', '100')
    try:
        word_count = int(word_count_str)
        if word_count not in [50, 100, 150, 200]:
            return jsonify(code=0, msg="字数参数无效，必须为50/100/150/200"), 400
    except ValueError:
        return jsonify(code=0, msg="字数参数必须为整数"), 400

    if not file or file.filename == '':
        return jsonify(code=0, msg="图片文件为空"), 400

    filename = secure_filename(file.filename)
    if '.' not in filename:
        return jsonify(code=-1, msg="图片格式无效"), 400

    ext = filename.rsplit('.', 1)[1].lower()
    if ext not in {"png", "jpg", "jpeg"}:
        return jsonify(code=-1, msg="仅支持PNG/JPG/JPEG格式"), 400

    file.seek(0, os.SEEK_END)
    file_size = file.tell()
    file.seek(0)
    if file_size > 10 * 1024 * 1024:  # 10MB
        return jsonify(code=-1, msg="图片大小不能超过10MB"), 400

    unique_id = str(uuid.uuid4())
    upload_filename = f"{unique_id}.{ext}"
    upload_path = uploads_dir / upload_filename

    try:
        file.save(upload_path)
        if not is_valid_image(upload_path):
            upload_path.unlink()
            return jsonify(code=-1, msg="上传的图片文件已损坏"), 400

        colors = extract_dominant_colors(upload_path)
        if not colors:
            return jsonify(code=0, msg="无法提取图片颜色信息"), 500

        emotion_text = analyze_image_emotion(upload_path, colors, word_count)
        return jsonify(
            code=1,
            msg="success",
            data={"colors": colors, "emotion": emotion_text}
        )
    except Exception as e:
        app.logger.error(f"处理请求失败: {e}")
        return jsonify(code=0, msg=f"处理请求失败: {e}"), 500


if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5003)


2.必须严格执行的要求:
	3.1使用Python>=3.9的语法，禁止使用typing模块的List/Dict/Optional等类，直接使用list/dict/None用于类型标注
	3.2为每个api端点定义pydantic返回值模型，与现有api风格保持一致
	3.3考虑已有项目的结构，使生成的代码从结构和框架都完美融入已有项目

3.不需要考虑src下前端代码
